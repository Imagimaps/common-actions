name: Run SQL via PSQL Client
description: Run SQL commands via PSQL client against the shared RDS instance
inputs:
  project:
    description: The name of the project
    required: false
    default: imagimaps
  service:
    description: The name of the service in which db actions are to be performed
    required: true
  environment:
    description: The environment to perform db operations in
    required: true
  aws_role_arn:
    description: The ARN of the role which can create repositories in ECR and push images to them
    required: true
  aws_region:
    description: The region where the ECR repository is located
    required: false
    default: ap-southeast-2
  cleanup_bastion:
    description: Whether to destroy the bastion
    required: false
    default: "false"
  bastion_timeout:
    description: The number of seconds to wait for the bastion to start. Default is 120 seconds (2 minutes)
    required: false
    default: 120

runs:
  using: "composite"

  steps:
    - name: Initialise
      id: start
      shell: bash
      run: |
        action_start_ts=$(date +%s)
        echo "ts=$action_start_ts" >> $GITHUB_OUTPUT

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Login to AWS
      id: login-aws
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ inputs.aws_role_arn }}
        aws-region: ${{ inputs.aws_region }}

    - name: Startup PSQL Bastion
      shell: bash
      id: psql-bastion
      run: |
        echo "Setting number of psql bastions to 1"
        aws ecs update-service \
          --cluster "$ECS_CLUSTER_NAME" \
          --service "$ECS_SERVICE_NAME" \
          --desired-count 1 \
          --no-cli-pager \
          --query "service.deployments"

        # Get start time in seconds since the epoch
        START_TIME=$(date +%s)

        while true; do
          CURRENT_TIME=$(date +%s)
          ELAPSED_TIME=$(($CURRENT_TIME - $START_TIME))

          if [[ "$ELAPSED_TIME" -ge ${{ inputs.bastion_timeout }} ]]; then
            echo "Timeout reached: 2 minutes have elapsed."
            exit 1
          fi

          RUNNING_TASKS=$(aws ecs describe-services \
            --cluster "$ECS_CLUSTER_NAME" \
            --services "$ECS_SERVICE_NAME" \
            --query "services[0].runningCount" \
            --output text)
          if [[ "$RUNNING_TASKS" -eq 1 ]]; then
            echo "The number of running tasks has reached 1."
            break
          else
            echo "Waiting for the number of running tasks to reach 1. Waiting 10s. Current running tasks: $RUNNING_TASKS"
            sleep 10 
          fi
        done

        TASK_ID=$(aws ecs list-tasks \
          --cluster "$ECS_CLUSTER_NAME" \
          --service-name "$ECS_SERVICE_NAME" \
          --desired-status RUNNING \
          --query "taskArns[0]" \
          --output text | cut -d'/' -f3)
        echo "Bastion Task ID: $TASK_ID"
        echo "task_id=$TASK_ID" >> $GITHUB_OUTPUT

        while true; do
          CURRENT_TIME=$(date +%s)
          ELAPSED_TIME=$(($CURRENT_TIME - $START_TIME))

          TASK_STATUS=$(aws ecs describe-tasks \
            --cluster "$ECS_CLUSTER_NAME" \
            --tasks "$TASK_ID" \
            --query "tasks[0].lastStatus" \
            --output text)

          if [[ "$TASK_STATUS" == "RUNNING" ]]; then
            echo "Task has reached the RUNNING state."
            break
          elif [[ "$ELAPSED_TIME" -ge ${{ inputs.bastion_timeout }} ]]; then
            echo "Timeout reached: 2 minutes have elapsed."
            exit 1
          else
            echo "Waiting for task to reach RUNNING state. Current status: $TASK_STATUS. Waiting 10s."
            sleep 10
          fi
        done

        while true; do
          CURRENT_TIME=$(date +%s)
          ELAPSED_TIME=$(($CURRENT_TIME - $START_TIME))

          ENABLE_EXECUTE_COMMAND=$(aws ecs describe-services \
            --cluster "$ECS_CLUSTER_NAME" \
            --services "$ECS_SERVICE_NAME" \
            --query "services[0].enableExecuteCommand")

          if [[ "$ENABLE_EXECUTE_COMMAND" == "true" ]]; then
            echo "Service is ready to execute commands."
            break
          elif [[ "$ELAPSED_TIME" -ge ${{ inputs.bastion_timeout }} ]]; then
            echo "Timeout reached: 2 minutes have elapsed."
            exit 1
          else
            echo "Waiting for enableExecuteCommand to become true. Waiting 10s."
            sleep 10
          fi
        done

        CONTAINER_NAME=$(aws ecs describe-tasks \
          --cluster "$ECS_CLUSTER_NAME" \
          --tasks "$TASK_ID" \
          --query "tasks[0].containers[0].name" \
          --output text)
        echo "Container Name: $CONTAINER_NAME"
        echo "container_name=$CONTAINER_NAME" >> $GITHUB_OUTPUT
      env:
        ECS_CLUSTER_NAME: ${{ inputs.project }}-${{ inputs.environment }}-fargate
        ECS_SERVICE_NAME: psql-bastion

    - name: Setup Database
      shell: bash
      run: |
        echo "Setting up database for $SERVICE_DB_NAME"
        rds_arn=$(aws resourcegroupstaggingapi get-resources \
          --tag-filters Key=Name,Values=imagimaps-shared \
          --resource-type-filters rds:db \
          --query 'ResourceTagMappingList[].ResourceARN' \
          --output text)
        echo "RDS ARN: $rds_arn"
        if [ -z "$rds_arn" ]; then
          echo "No RDS db found for imagimaps-shared"
          exit 1
        fi
        rds_info=$(aws rds describe-db-instances \
          --db-instance-identifier $(basename $rds_arn) \
          --query 'DBInstances[0].[DBInstanceIdentifier,Endpoint.Address,Endpoint.Port,DBInstanceStatus,MasterUserSecret]' \
          --output json)
        echo "RDS Info: $rds_info"
        rds_db_name=$(echo $rds_info | jq -r '.[0]')
        rds_host=$(echo $rds_info | jq -r '.[1]')
        rds_port=$(echo $rds_info | jq -r '.[2]')
        rds_status=$(echo $rds_info | jq -r '.[3]')
        echo "$rds_db_name $rds_host $rds_port $rds_status"
        if [ "$rds_status" != "available" ]; then
          echo "RDS db is not available"
          exit 1
        fi

        rds_master_user_secret_arn=$(echo $rds_info | jq -r '.[4].SecretArn')
        echo "RDS Master User Secret ARN: $rds_master_user_secret_arn"
        rds_master_user_secret=$(aws secretsmanager get-secret-value \
          --secret-id $rds_master_user_secret_arn \
          --query SecretString \
          --output text)

        # Check if the RDS host is resolvable
        if ! nslookup $rds_host; then
          echo "RDS host $rds_host is not resolvable"
          exit 1
        fi

        PG_VARS="PGHOST=\"$rds_host\" PGPORT=\"$rds_port\" PGDATABASE=\"postgres\""
        echo "PGHOST=$rds_host PGPORT=$rds_port PGDATABASE=postgres"
        aws ecs execute-command \
          --cluster "$CLUSTER_NAME" \
          --task "$TASK_ID" \
          --container "$CONTAINER_NAME" \
          --command "sh -c '$PG_VARS /scripts/bootstrap-service-db.sh $SERVICE_DB_NAME $ENVIRONMENT'" \
          --interactive
      env:
        ENVIRONMENT: ${{ inputs.environment }}
        CLUSTER_NAME: ${{ inputs.project }}-${{ inputs.environment }}-fargate
        CONTAINER_NAME: ${{ steps.psql-bastion.outputs.container_name }}
        TASK_ID: ${{ steps.psql-bastion.outputs.task_id }}
        SERVICE_DB_NAME: ${{ inputs.service }}
        ACTION_PATH: ${{ env.ACTION_PATH }}

    - name: Destroy PSQL Bastion
      if: inputs.cleanup_bastion == 'true'
      shell: bash
      run: |
        echo "Setting number of psql bastions to 0"
        aws ecs update-service \
          --cluster "$CLUSTER_NAME" \
          --service "$SERVICE_NAME" \
          --desired-count 0 \
          --no-cli-pager \
          --query "service.deployments"
        echo "All DB setup tasks have been completed"
      env:
        CLUSTER_NAME: imagimaps-${{ inputs.environment }}-fargate
        SERVICE_NAME: psql-bastion
