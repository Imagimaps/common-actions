name: Deploy Service
description: Deploy a service to the platform
inputs:
  service_name:
    description: The name of the service
    required: true
  environment:
    description: The environment to deploy the service to
    required: true
  environment_short_name:
    description: The short name of the environment
    required: true
  aws_role_arn:
    description: The ARN of the role which can create repositories in ECR and push images to them
    required: true
  aws_account_id:
    description: The AWS account ID where the ECR repository is located
    required: true
  artifacts_aws_account_id:
    description: The AWS account ID where the ECR repository is located
    required: true
  aws_region:
    description: The region where the ECR repository is located
    required: false
    default: ap-southeast-2
  high_performance:
    description: Whether to deploy the service in high performance mode
    required: false
    default: "false"
  destroy:
    description: Whether to destroy the service
    required: false
    default: "false"
outputs:
  action_runtime:
    description: The duration of the action in seconds
    value: ${{ steps.end.outputs.runtime }}

runs:
  using: "composite"

  steps:
    - name: Initialise
      id: start
      shell: bash
      run: |
        echo "Deloying Service [${{ inputs.service_name }}]"
        echo "ACTION_PATH=$(realpath ${{ github.action_path }})" >> $GITHUB_ENV
        echo "Running in destroy mode: ${{ inputs.destroy }}"

    - name: Set Domain Name
      id: domain
      shell: bash
      run: |
        if [[ "${{ inputs.environment_short_name }}" == "prod" || "${{ inputs.environment_short_name }}" == "prd" || "${{ inputs.environment }}" == "production" ]]; then
          echo "domain=imagimaps.com" >> $GITHUB_OUTPUT
        else
          echo "domain=${{ inputs.environment_short_name }}.imagimaps.com" >> $GITHUB_OUTPUT
        fi

    - name: Set Container Performance Requirements
      id: performance
      shell: bash
      run: |
        echo "container_memory=512" >> $GITHUB_OUTPUT
        echo "container_cpu=128" >> $GITHUB_OUTPUT
        echo "task_memory=512" >> $GITHUB_OUTPUT

        if [[ "${{ inputs.high_performance }}" == "true" ]]; then
          echo "container_cpu=512" >> $GITHUB_OUTPUT
          echo "container_memory=1024" >> $GITHUB_OUTPUT
          echo "task_memory=1024" >> $GITHUB_OUTPUT
        fi

    - name: Create Fargate Service
      if: ${{ inputs.destroy == 'false' }}
      uses: Imagimaps/common-actions/.github/actions/deploy-tf@main
      with:
        environment: ${{ inputs.environment }}
        tf_module_name: ecs-service
        tf_module_dir: ${{ env.ACTION_PATH }}/tf/ecs-service
        tf_workspace: service.${{ inputs.service_name }}.${{ inputs.environment_short_name }}
        tf_vars: |
          project=imagimaps
          service_name=${{ inputs.service_name }}
          environment_short_name=${{ inputs.environment_short_name }}
          artifacts_aws_account_id=${{ inputs.artifacts_aws_account_id }}
          root_domain=${{ steps.domain.outputs.domain }}
          task_memory=${{ steps.performance.outputs.task_memory }}
          container_memory=${{ steps.performance.outputs.container_memory }}
          container_cpu=${{ steps.performance.outputs.container_cpu }}
        aws_role_arn: ${{ inputs.aws_role_arn }}
        aws_account_id: ${{ inputs.aws_account_id }}
        aws_region: ${{ inputs.aws_region }}

    - name: Destroy Fargate Service
      if: ${{ inputs.destroy == 'true' }}
      uses: Imagimaps/common-actions/.github/actions/deploy-tf@main
      with:
        environment: ${{ inputs.environment }}
        tf_module_name: ecs-service
        tf_module_dir: ${{ env.ACTION_PATH }}/tf/ecs-service
        tf_workspace: service.${{ inputs.service_name }}.${{ inputs.environment_short_name }}
        tf_vars: |
          project=imagimaps
          service_name=${{ inputs.service_name }}
          environment_short_name=${{ inputs.environment_short_name }}
          artifacts_aws_account_id=${{ inputs.artifacts_aws_account_id }}
          root_domain=${{ steps.domain.outputs.domain }}
          container_memory=${{ steps.performance.outputs.memory }}
          container_cpu=${{ steps.performance.outputs.cpu }}
        aws_role_arn: ${{ inputs.aws_role_arn }}
        aws_account_id: ${{ inputs.aws_account_id }}
        aws_region: ${{ inputs.aws_region }}
        destroy: ${{ inputs.destroy }}

    - name: Complete
      if: always()
      id: end
      shell: bash
      run: |
        action_start_ts=${{ steps.start.outputs.ts }}
        action_end_ts=$(date +%s)
        action_duration=$((action_end_ts - action_start_ts))
        echo "runtime=$action_duration" >> $GITHUB_OUTPUT
        echo "Service ${{ inputs.service_name }}: $action_duration seconds" >> $GITHUB_STEP_SUMMARY
