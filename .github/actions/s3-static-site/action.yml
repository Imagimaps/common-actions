name: S3 Static Website
description: Create and manage a S3 Static Website bucket and CloudFront distribution
inputs:
  domain:
    description: The domain name of the project
    required: false
    default: imagimaps.com
  environment:
    description: The environment which this content is to be based in
    required: true
  environment_short_name:
    description: The short name of the environment
    required: true
  sub_environment:
    description: The sub-environment to deploy the service to
    required: false
  subdomains:
    description: A comma-separated list of additional subdomains to include in the certificate and CloudFront distribution
    required: false
    default: ""
  aws_role_arn:
    description: The ARN of the role which can create and manage S3 buckets
    required: true
  aws_account_id:
    description: The AWS account ID where the S3 Bucket and CloudFront distribution are to be created
    required: true
  aws_region:
    description: AWS Region where the S3 bucket is to be created
    required: false
    default: ap-southeast-2
  destroy:
    description: Whether to destroy the infrastructure. Values are 'true', 'soft' or 'false'
    required: false
    default: "false"
  soft_destroy:
    description: Whether to destroy the bucket and CloudFront distribution
    required: false
    default: "false"
outputs:
  bucket-name:
    description: The name of the S3 bucket created
    value: ${{ steps.bucket-data.outputs.name }}
  domain-name:
    description: The primary domain name for the static site
    value: ${{ steps.domain.outputs.name }}
  subdomains:
    description: The list of subdomains configured for the static site
    value: ${{ steps.process-subdomains.outputs.subdomains_json }}

runs:
  using: "composite"

  steps:
    - name: Initialise
      id: start
      shell: bash
      run: |
        action_start_ts=$(date +%s)
        echo "ts=$action_start_ts" >> $GITHUB_OUTPUT
        echo "ACTION_PATH=$(realpath ${{ github.action_path }})" >> $GITHUB_ENV

        valid_values=("true" "soft" "false")
        if [[ ! " ${valid_values[@]} " =~ " ${{ inputs.destroy }} " ]]; then
          echo "Invalid value for 'destroy' input: ${{ inputs.destroy }}. Allowed values are 'true', 'soft', or 'false'."
          exit 1
        fi
        echo "Running in destroy mode: ${{ inputs.destroy }}"

    - name: Assemble Website Domain
      id: domain
      shell: bash
      run: |
        if [[ "${{ inputs.environment_short_name }}" == "prod" || "${{ inputs.environment_short_name }}" == "prd" || "${{ inputs.environment }}" == "production" ]]; then
          domain_name="${{ inputs.domain }}"
        else
          domain_name="${{ inputs.environment_short_name }}.${{ inputs.domain }}"
          if [ -n "${{ inputs.sub_environment }}" ]; then
            domain_name="${inputs.sub_environment}.${domain_name}"
          fi
        fi
        if [[ ${#domain_name} -lt 3 || ${#domain_name} -gt 63 ]]; then
          echo "Bucket name must be between 3 and 63 characters long."
          exit 1
        fi
        if [[ ! "$domain_name" =~ ^[a-z0-9]([a-z0-9.-]*[a-z0-9])?$ ]]; then
          echo "Bucket name can only contain lowercase letters, numbers, dots (.), and hyphens (-), and must start and end with a letter or number."
          exit 1
        fi
        if [[ "$domain_name" =~ \.\. ]]; then
          echo "Bucket name must not contain two adjacent periods."
          exit 1
        fi
        echo "S3 Bucket Name: $domain_name" >> $GITHUB_STEP_SUMMARY
        echo "name=$domain_name" >> $GITHUB_OUTPUT

    - name: Process Subdomains
      id: process-subdomains
      shell: bash
      run: |
        # Process the main domain
        main_domain="${{ steps.domain.outputs.name }}"
        
        # Initialize array with the main domain
        all_domains=("$main_domain")
        
        # Process additional subdomains if provided
        if [ -n "${{ inputs.subdomains }}" ]; then
          IFS=',' read -ra SUBDOMAINS <<< "${{ inputs.subdomains }}"
          for subdomain in "${SUBDOMAINS[@]}"; do
            # Trim whitespace
            subdomain=$(echo "$subdomain" | xargs)
            
            # Validate subdomain format
            if [[ ! "$subdomain" =~ ^[a-z0-9]([a-z0-9.-]*[a-z0-9])?$ ]]; then
              echo "Subdomain '$subdomain' contains invalid characters. Skipping."
              continue
            fi
            
            # Create fully qualified domain name
            # Don't prepend environment name for production environments
            if [[ "${{ inputs.environment_short_name }}" == "prod" || "${{ inputs.environment_short_name }}" == "prd" || "${{ inputs.environment }}" == "production" ]]; then
              fq_subdomain="${subdomain}.${{ inputs.domain }}"
            else
              fq_subdomain="${subdomain}.${{ inputs.environment_short_name }}.${{ inputs.domain }}"
              if [ -n "${{ inputs.sub_environment }}" ]; then
                fq_subdomain="${subdomain}.${{ inputs.sub_environment }}.${{ inputs.environment_short_name }}.${{ inputs.domain }}"
              fi
            fi
            
            # Add to array
            all_domains+=("$fq_subdomain")
            
            echo "Added subdomain: $fq_subdomain" >> $GITHUB_STEP_SUMMARY
          done
        fi
        
        # Convert array to JSON
        subdomains_json=$(printf '%s\n' "${all_domains[@]}" | jq -R . | jq -s .)
        echo "subdomains_json=$subdomains_json" >> $GITHUB_OUTPUT
        echo "subdomains_count=${#all_domains[@]}" >> $GITHUB_OUTPUT
        echo "Configured domains: $subdomains_json" >> $GITHUB_STEP_SUMMARY

    - name: Bootstrap S3 Static Site Bucket for ${{ inputs.module }} ${{ inputs.environment }}
      if: ${{ inputs.destroy == 'false' }}
      uses: Imagimaps/common-actions/.github/actions/deploy-tf@main
      with:
        environment: ${{ inputs.environment }}
        tf_module_name: s3-bucket
        tf_module_dir: ${{ env.ACTION_PATH }}/tf/s3-bucket
        tf_workspace: ${{ steps.domain.outputs.name }}
        tf_vars: |
          bucket_name=${{ steps.domain.outputs.name }}
        aws_role_arn: ${{ inputs.aws_role_arn }}
        aws_account_id: ${{ inputs.aws_account_id }}
        aws_region: ${{ inputs.aws_region }}

    - name: Login to AWS
      id: login-aws
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ inputs.aws_role_arn }}
        aws-region: ${{ inputs.aws_region }}

    - name: Request Cert for ${{ inputs.module }} ${{ inputs.environment }}
      if: ${{ inputs.destroy == 'false' }}
      uses: Imagimaps/common-actions/.github/actions/deploy-tf@main
      with:
        environment: ${{ inputs.environment }}
        tf_module_name: cert
        tf_module_dir: ${{ env.ACTION_PATH }}/tf/cert
        tf_workspace: ${{ steps.domain.outputs.name }}
        tf_vars: |
          root_domain=${{ steps.domain.outputs.name }}
          requested_fq_domain=${{ steps.domain.outputs.name }}
          additional_domain_names=${{ steps.process-subdomains.outputs.subdomains_json }}
        aws_role_arn: ${{ inputs.aws_role_arn }}
        aws_account_id: ${{ inputs.aws_account_id }}
        aws_region: ${{ inputs.aws_region }}

    - name: Setup CDN for ${{ inputs.module }} ${{ inputs.environment }}
      if: ${{ inputs.destroy == 'false' }}
      uses: Imagimaps/common-actions/.github/actions/deploy-tf@main
      with:
        environment: ${{ inputs.environment }}
        tf_module_name: cloudfront
        tf_module_dir: ${{ env.ACTION_PATH }}/tf/cloudfront
        tf_workspace: ${{ steps.domain.outputs.name }}
        tf_vars: |
          root_domain=${{ steps.domain.outputs.name }}
          fq_domain_name=${{ steps.domain.outputs.name }}
          additional_domain_names=${{ steps.process-subdomains.outputs.subdomains_json }}
        aws_role_arn: ${{ inputs.aws_role_arn }}
        aws_account_id: ${{ inputs.aws_account_id }}
        aws_region: ${{ inputs.aws_region }}

    - name: Destroy CDN for ${{ inputs.module }} ${{ inputs.environment }}
      if: ${{ inputs.destroy != 'false' }}
      uses: Imagimaps/common-actions/.github/actions/deploy-tf@main
      with:
        environment: ${{ inputs.environment }}
        tf_module_name: cloudfront
        tf_module_dir: ${{ env.ACTION_PATH }}/tf/cloudfront
        tf_workspace: ${{ steps.domain.outputs.name }}
        tf_vars: |
          root_domain=${{ steps.domain.outputs.name }}
          fq_domain_name=${{ steps.domain.outputs.name }}
          additional_domain_names=${{ steps.process-subdomains.outputs.subdomains_json }}
        aws_role_arn: ${{ inputs.aws_role_arn }}
        aws_account_id: ${{ inputs.aws_account_id }}
        aws_region: ${{ inputs.aws_region }}
        destroy: ${{ inputs.destroy }}

    - name: Destroy S3 Static Site Bucket for ${{ inputs.module }} ${{ inputs.environment }}
      if: ${{ inputs.destroy != 'false' }}
      uses: Imagimaps/common-actions/.github/actions/deploy-tf@main
      with:
        environment: ${{ inputs.environment }}
        tf_module_name: s3-bucket
        tf_module_dir: ${{ env.ACTION_PATH }}/tf/s3-bucket
        tf_workspace: ${{ steps.domain.outputs.name }}
        tf_vars: |
          bucket_name=${{ steps.domain.outputs.name }}
        aws_role_arn: ${{ inputs.aws_role_arn }}
        aws_account_id: ${{ inputs.aws_account_id }}
        aws_region: ${{ inputs.aws_region }}
        destroy: ${{ inputs.destroy }}
