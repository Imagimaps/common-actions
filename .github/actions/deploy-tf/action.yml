name: Deploy Terraform Module
description: Plans and deploys specified Terraform module
inputs:
  tf_module_name:
    description: The name of the Terraform module
    required: true
  tf_module_dir:
    description: The full path to the tf module directory
    required: true
  tf_workspace:
    description: The Terraform workspace to use
    required: true
  tf_vars:
    description: The input variables to pass to the Terraform module. Pass in a multi-line string in the format `key=value`
    required: false
  environment:
    description: The environment to deploy the service to
    required: true
  aws_role_arn:
    description: The ARN of the role which can create repositories in ECR and push images to them
    required: true
  aws_account_id:
    description: The AWS account ID where the ECR repository is located
    required: true
  aws_region:
    description: The region where the ECR repository is located
    required: false
    default: ap-southeast-2
  destroy:
    description: Whether to destroy the Terraform module
    required: false
    default: "false"
outputs:
  action_runtime:
    description: The duration of the action in seconds
    value: ${{ steps.end.outputs.runtime }}

runs:
  using: "composite"

  steps:
    - name: Initialise
      id: start
      shell: bash
      run: |
        action_start_ts=$(date +%s)
        echo "ts=$action_start_ts" >> $GITHUB_OUTPUT
        echo "Running deploy-tf in destroy mode: ${{ inputs.destroy }}"

    - name: Set environment name
      id: set-env
      shell: bash
      run: |
        if [[ "${{ inputs.environment }}" == "development" ]]; then
          echo "env_short_name=dev" >> $GITHUB_OUTPUT
        elif [[ "${{ inputs.environment }}" == "production" ]]; then
          echo "env_short_name=prod" >> $GITHUB_OUTPUT
        else
          echo "env_short_name=${{ inputs.environment }}" >> $GITHUB_OUTPUT
        fi

    - name: Login to AWS
      id: login-aws
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ inputs.aws_role_arn }}
        aws-region: ${{ inputs.aws_region }}

    - name: Get Github OIDC Token
      id: oidc_token
      shell: bash
      run: |
        web_identity_token=$(curl \
          -H "Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
          "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=sts.amazonaws.com")
        echo $web_identity_token | jq -r '.value' >> web_identity_token.txt
        token_path=$(pwd)/web_identity_token.txt
        echo "AWS_WEB_IDENTITY_TOKEN_FILE=$token_path" >> $GITHUB_ENV

    - name: Activate TF Workspace
      shell: bash
      working-directory: ${{ inputs.tf_module_dir }}
      run: |
        terraform init \
          -backend-config="region=${{ inputs.aws_region }}" \
          -backend-config="bucket=tf-state-${{ inputs.aws_region }}-${{ inputs.aws_account_id }}" \
          -backend-config="key=${{ inputs.tf_module_name }}/terraform.tfstate" \
          -backend-config="dynamodb_table=tf-state-lock-${{ inputs.aws_region }}-${{ inputs.aws_account_id }}"
        terraform workspace select -or-create ${{ inputs.tf_workspace }}

    - name: Find imaginarium.yml
      id: imaginarium
      shell: bash
      run: |
        START_DIR="${GITHUB_WORKSPACE:-.}"
        echo "Starting Search for imaginarium.yml at $START_DIR"
        FILE_PATH=$(find "$START_DIR" -name "imaginarium.yml" -print -quit)

        if [ -n "$FILE_PATH" ]; then
          echo "imaginarium.yml found at $FILE_PATH"
          echo "path=$FILE_PATH" >> $GITHUB_OUTPUT
          RELATIVE_PATH=$(realpath --relative-to="$GITHUB_WORKSPACE" "$FILE_PATH")
          echo "relative_path=$RELATIVE_PATH" >> $GITHUB_OUTPUT
        else
          echo "imaginarium.yml not found"
        fi

    - name: Retrieve list of secrets needed for module (if any)
      continue-on-error: true
      if: steps.imaginarium.outputs.path
      id: yq_needs_secrets
      uses: mikefarah/yq@master
      with:
        cmd: yq -p yaml -o json -I 0 '.needs.secrets' ${{ steps.imaginarium.outputs.relative_path }}

    - name: Process Secrets Requirements
      continue-on-error: true
      shell: bash
      run: |
        # This is a hack. TODO: Make proper imaginarium.yml parser
        echo "TF_VAR_secret_names=$TF_VAR_secret_names"
        needs_secrets="${{ steps.yq_needs_secrets.outputs.result }}"
        if [ -n "$TF_VAR_secret_names" ] && [ "$TF_VAR_secret_names" != "null" ]; then
          echo "Secrets needed for this module: $TF_VAR_secret_names"
          echo "TF_VAR_secret_names=$TF_VAR_secret_names" >> $GITHUB_ENV
        fi
      env:
        TF_VAR_secret_names: ${{ steps.yq_needs_secrets.outputs.result }}

    - name: Process Plan Inputs
      id: process_inputs
      shell: bash
      run: |
        echo "Processing Inputs"
        echo "${{ inputs.tf_vars }}"
        tf_vars=""
        if [ -n "${{ inputs.tf_vars }}" ]; then
          while IFS= read -r line; do
            if [ -n "$line" ]; then
              tf_vars="$tf_vars -var=\"$line\""
            fi
          done <<< "${{ inputs.tf_vars }}"
        fi
        echo "tf_vars=$tf_vars" >> $GITHUB_OUTPUT
        echo Processed Inputs
        echo $tf_vars

    - name: Plan ${{ inputs.tf_workspace }} ${{ inputs.tf_module_name }}
      if: inputs.destroy == 'false'
      id: plan
      shell: bash
      working-directory: ${{ inputs.tf_module_dir }}
      run: |
        echo "Planning ${{ inputs.tf_module_name }} in ${{ inputs.tf_workspace }}..."
        set +e
        env | grep TF_VAR
        export TF_VAR_web_identity_token_file=${{ env.AWS_WEB_IDENTITY_TOKEN_FILE }}
        terraform plan \
          -var="aws_region=${{ inputs.aws_region }}" \
          -var="project=imagimaps" \
          -var="environment=${{ inputs.environment }}" \
          ${{ steps.process_inputs.outputs.tf_vars }} \
          -out=imagimaps.${{ inputs.tf_workspace }}.${{ inputs.tf_module_name }}.$ENV_SHORT_NAME.tfplan \
          -input=false \
          -detailed-exitcode \
          -no-color
        plan_exit_code=$?
        set -e
        echo "exit_code=$plan_exit_code" >> $GITHUB_OUTPUT
      env:
        ENV_SHORT_NAME: ${{ steps.set-env.outputs.env_short_name }}

    - name: Plan Destroy ${{ inputs.tf_workspace }} ${{ inputs.tf_module_name }}
      if: inputs.destroy == 'true' || inputs.destroy == 'soft'
      id: plan_destroy
      shell: bash
      working-directory: ${{ inputs.tf_module_dir }}
      run: |
        echo "Planning to Destroy ${{ inputs.tf_module_name }} in ${{ inputs.tf_workspace }}..."
        set +e
        env | grep TF_VAR
        export TF_VAR_web_identity_token_file=${{ env.AWS_WEB_IDENTITY_TOKEN_FILE }}
        terraform plan \
          -destroy \
          -var="aws_region=${{ inputs.aws_region }}" \
          -var="project=imagimaps" \
          -var="environment=${{ inputs.environment }}" \
          ${{ steps.process_inputs.outputs.tf_vars }} \
          -out=imagimaps.${{ inputs.tf_workspace }}.${{ inputs.tf_module_name }}.$ENV_SHORT_NAME.tfplan \
          -input=false \
          -detailed-exitcode \
          -no-color
        plan_exit_code=$?
        set -e
        echo "exit_code=$plan_exit_code" >> $GITHUB_OUTPUT
      env:
        ENV_SHORT_NAME: ${{ steps.set-env.outputs.env_short_name }}

    - name: Skip if Exists
      if: steps.plan.outputs.exit_code == 0 || steps.plan_destroy.outputs.exit_code == 0
      shell: bash
      run: |
        echo "[✅] Plan successful with no diffs"
        echo "[⏭️] Module already exists, skipping..."
        exit 0

    - name: Plan Failed
      if: steps.plan.outputs.exit_code == 1 || steps.plan_destroy.outputs.exit_code == 1
      shell: bash
      run: |
        echo "[❌] Error: Terraform plan failed"
        exit 1

    - name: Plan Succeeded
      if: steps.plan.outputs.exit_code == 2 || steps.plan_destroy.outputs.exit_code == 2
      shell: bash
      working-directory: ${{ inputs.tf_module_dir }}
      run: |
        echo "[✅] Plan successful, changes detected..."
        echo "[▶️] Proceeding with apply..."

        terraform show -no-color imagimaps.${{ inputs.tf_workspace }}.${{ inputs.tf_module_name }}.$ENV_SHORT_NAME.tfplan >> imagimaps.${{ inputs.tf_workspace }}.${{ inputs.tf_module_name }}.$ENV_SHORT_NAME.tfplan.txt
      env:
        ENV_SHORT_NAME: ${{ steps.set-env.outputs.env_short_name }}

    - name: Upload TF Plan
      if: steps.plan.outputs.exit_code == 2 || steps.plan_destroy.outputs.exit_code == 2
      uses: actions/upload-artifact@v4
      with:
        name: imagimaps.${{ inputs.tf_workspace }}.${{ inputs.tf_module_name }}.tfplan
        retention-days: 7
        path: |
          ${{ inputs.tf_module_dir }}/imagimaps.${{ inputs.tf_workspace }}.${{ inputs.tf_module_name }}.$ENV_SHORT_NAME.tfplan
          ${{ inputs.tf_module_dir }}/imagimaps.${{ inputs.tf_workspace }}.${{ inputs.tf_module_name }}.$ENV_SHORT_NAME.tfplan.txt
          ${{ inputs.tf_module_dir }}/.terraform.lock.hcl
      env:
        ENV_SHORT_NAME: ${{ steps.set-env.outputs.env_short_name }}

    - name: Apply TF Plan
      if: steps.plan.outputs.exit_code == 2 || steps.plan_destroy.outputs.exit_code == 2
      shell: bash
      working-directory: ${{ inputs.tf_module_dir }}
      run: |
        terraform apply -auto-approve imagimaps.${{ inputs.tf_workspace }}.${{ inputs.tf_module_name }}.$ENV_SHORT_NAME.tfplan
      env:
        ENV_SHORT_NAME: ${{ steps.set-env.outputs.env_short_name }}

    - name: Complete
      if: always()
      id: end
      shell: bash
      run: |
        action_start_ts=${{ steps.start.outputs.ts }}
        action_end_ts=$(date +%s)
        action_duration=$((action_end_ts - action_start_ts))
        echo "runtime=$action_duration" >> $GITHUB_OUTPUT
        echo "TF Module ${{ inputs.tf_module_name }}: $action_duration seconds" >> $GITHUB_STEP_SUMMARY
